// Generated by view binder compiler. Do not edit!
package com.example.my_first_app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.my_first_app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBleConnectionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView bluetoothIcon;

  @NonNull
  public final LinearLayout bottomContainer;

  @NonNull
  public final LinearLayout communicationContainer;

  @NonNull
  public final TextView deviceListHeader;

  @NonNull
  public final ListView deviceListView;

  @NonNull
  public final Button disconnectButton;

  @NonNull
  public final Button enableBluetoothButton;

  @NonNull
  public final LinearLayout headerLayout;

  @NonNull
  public final EditText messageEditText;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final TextView receivedDataTextView;

  @NonNull
  public final Button scanButton;

  @NonNull
  public final View scanCircleInner;

  @NonNull
  public final Button scanDevicesButton;

  @NonNull
  public final View scanRingOuter;

  @NonNull
  public final TextView scanText;

  @NonNull
  public final ConstraintLayout scanningContainer;

  @NonNull
  public final Button sendButton;

  @NonNull
  public final Button skipButton;

  @NonNull
  public final TextView statusTextView;

  private ActivityBleConnectionBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView bluetoothIcon, @NonNull LinearLayout bottomContainer,
      @NonNull LinearLayout communicationContainer, @NonNull TextView deviceListHeader,
      @NonNull ListView deviceListView, @NonNull Button disconnectButton,
      @NonNull Button enableBluetoothButton, @NonNull LinearLayout headerLayout,
      @NonNull EditText messageEditText, @NonNull ProgressBar progressBar,
      @NonNull TextView receivedDataTextView, @NonNull Button scanButton,
      @NonNull View scanCircleInner, @NonNull Button scanDevicesButton, @NonNull View scanRingOuter,
      @NonNull TextView scanText, @NonNull ConstraintLayout scanningContainer,
      @NonNull Button sendButton, @NonNull Button skipButton, @NonNull TextView statusTextView) {
    this.rootView = rootView;
    this.bluetoothIcon = bluetoothIcon;
    this.bottomContainer = bottomContainer;
    this.communicationContainer = communicationContainer;
    this.deviceListHeader = deviceListHeader;
    this.deviceListView = deviceListView;
    this.disconnectButton = disconnectButton;
    this.enableBluetoothButton = enableBluetoothButton;
    this.headerLayout = headerLayout;
    this.messageEditText = messageEditText;
    this.progressBar = progressBar;
    this.receivedDataTextView = receivedDataTextView;
    this.scanButton = scanButton;
    this.scanCircleInner = scanCircleInner;
    this.scanDevicesButton = scanDevicesButton;
    this.scanRingOuter = scanRingOuter;
    this.scanText = scanText;
    this.scanningContainer = scanningContainer;
    this.sendButton = sendButton;
    this.skipButton = skipButton;
    this.statusTextView = statusTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBleConnectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBleConnectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_ble_connection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBleConnectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bluetoothIcon;
      ImageView bluetoothIcon = ViewBindings.findChildViewById(rootView, id);
      if (bluetoothIcon == null) {
        break missingId;
      }

      id = R.id.bottomContainer;
      LinearLayout bottomContainer = ViewBindings.findChildViewById(rootView, id);
      if (bottomContainer == null) {
        break missingId;
      }

      id = R.id.communicationContainer;
      LinearLayout communicationContainer = ViewBindings.findChildViewById(rootView, id);
      if (communicationContainer == null) {
        break missingId;
      }

      id = R.id.deviceListHeader;
      TextView deviceListHeader = ViewBindings.findChildViewById(rootView, id);
      if (deviceListHeader == null) {
        break missingId;
      }

      id = R.id.deviceListView;
      ListView deviceListView = ViewBindings.findChildViewById(rootView, id);
      if (deviceListView == null) {
        break missingId;
      }

      id = R.id.disconnectButton;
      Button disconnectButton = ViewBindings.findChildViewById(rootView, id);
      if (disconnectButton == null) {
        break missingId;
      }

      id = R.id.enableBluetoothButton;
      Button enableBluetoothButton = ViewBindings.findChildViewById(rootView, id);
      if (enableBluetoothButton == null) {
        break missingId;
      }

      id = R.id.headerLayout;
      LinearLayout headerLayout = ViewBindings.findChildViewById(rootView, id);
      if (headerLayout == null) {
        break missingId;
      }

      id = R.id.messageEditText;
      EditText messageEditText = ViewBindings.findChildViewById(rootView, id);
      if (messageEditText == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.receivedDataTextView;
      TextView receivedDataTextView = ViewBindings.findChildViewById(rootView, id);
      if (receivedDataTextView == null) {
        break missingId;
      }

      id = R.id.scanButton;
      Button scanButton = ViewBindings.findChildViewById(rootView, id);
      if (scanButton == null) {
        break missingId;
      }

      id = R.id.scanCircleInner;
      View scanCircleInner = ViewBindings.findChildViewById(rootView, id);
      if (scanCircleInner == null) {
        break missingId;
      }

      id = R.id.scanDevicesButton;
      Button scanDevicesButton = ViewBindings.findChildViewById(rootView, id);
      if (scanDevicesButton == null) {
        break missingId;
      }

      id = R.id.scanRingOuter;
      View scanRingOuter = ViewBindings.findChildViewById(rootView, id);
      if (scanRingOuter == null) {
        break missingId;
      }

      id = R.id.scanText;
      TextView scanText = ViewBindings.findChildViewById(rootView, id);
      if (scanText == null) {
        break missingId;
      }

      id = R.id.scanningContainer;
      ConstraintLayout scanningContainer = ViewBindings.findChildViewById(rootView, id);
      if (scanningContainer == null) {
        break missingId;
      }

      id = R.id.sendButton;
      Button sendButton = ViewBindings.findChildViewById(rootView, id);
      if (sendButton == null) {
        break missingId;
      }

      id = R.id.skipButton;
      Button skipButton = ViewBindings.findChildViewById(rootView, id);
      if (skipButton == null) {
        break missingId;
      }

      id = R.id.statusTextView;
      TextView statusTextView = ViewBindings.findChildViewById(rootView, id);
      if (statusTextView == null) {
        break missingId;
      }

      return new ActivityBleConnectionBinding((ConstraintLayout) rootView, bluetoothIcon,
          bottomContainer, communicationContainer, deviceListHeader, deviceListView,
          disconnectButton, enableBluetoothButton, headerLayout, messageEditText, progressBar,
          receivedDataTextView, scanButton, scanCircleInner, scanDevicesButton, scanRingOuter,
          scanText, scanningContainer, sendButton, skipButton, statusTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
