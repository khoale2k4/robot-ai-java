// Generated by view binder compiler. Do not edit!
package com.example.my_first_app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.my_first_app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRobotControlBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button backwardButton;

  @NonNull
  public final LinearLayout communicationLogContainer;

  @NonNull
  public final TextView communicationLogText;

  @NonNull
  public final Button connectButton;

  @NonNull
  public final TextView connectionStatusText;

  @NonNull
  public final LinearLayout controlButtonsContainer;

  @NonNull
  public final ConstraintLayout controlsView;

  @NonNull
  public final Button disconnectButton;

  @NonNull
  public final Button forwardButton;

  @NonNull
  public final Button leftButton;

  @NonNull
  public final TextView noConnectionDescription;

  @NonNull
  public final ImageView noConnectionIcon;

  @NonNull
  public final TextView noConnectionTitle;

  @NonNull
  public final ConstraintLayout noConnectionView;

  @NonNull
  public final Button rightButton;

  @NonNull
  public final Button rotateLeftButton;

  @NonNull
  public final Button rotateRightButton;

  private FragmentRobotControlBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button backwardButton, @NonNull LinearLayout communicationLogContainer,
      @NonNull TextView communicationLogText, @NonNull Button connectButton,
      @NonNull TextView connectionStatusText, @NonNull LinearLayout controlButtonsContainer,
      @NonNull ConstraintLayout controlsView, @NonNull Button disconnectButton,
      @NonNull Button forwardButton, @NonNull Button leftButton,
      @NonNull TextView noConnectionDescription, @NonNull ImageView noConnectionIcon,
      @NonNull TextView noConnectionTitle, @NonNull ConstraintLayout noConnectionView,
      @NonNull Button rightButton, @NonNull Button rotateLeftButton,
      @NonNull Button rotateRightButton) {
    this.rootView = rootView;
    this.backwardButton = backwardButton;
    this.communicationLogContainer = communicationLogContainer;
    this.communicationLogText = communicationLogText;
    this.connectButton = connectButton;
    this.connectionStatusText = connectionStatusText;
    this.controlButtonsContainer = controlButtonsContainer;
    this.controlsView = controlsView;
    this.disconnectButton = disconnectButton;
    this.forwardButton = forwardButton;
    this.leftButton = leftButton;
    this.noConnectionDescription = noConnectionDescription;
    this.noConnectionIcon = noConnectionIcon;
    this.noConnectionTitle = noConnectionTitle;
    this.noConnectionView = noConnectionView;
    this.rightButton = rightButton;
    this.rotateLeftButton = rotateLeftButton;
    this.rotateRightButton = rotateRightButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRobotControlBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRobotControlBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_robot_control, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRobotControlBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backwardButton;
      Button backwardButton = ViewBindings.findChildViewById(rootView, id);
      if (backwardButton == null) {
        break missingId;
      }

      id = R.id.communicationLogContainer;
      LinearLayout communicationLogContainer = ViewBindings.findChildViewById(rootView, id);
      if (communicationLogContainer == null) {
        break missingId;
      }

      id = R.id.communicationLogText;
      TextView communicationLogText = ViewBindings.findChildViewById(rootView, id);
      if (communicationLogText == null) {
        break missingId;
      }

      id = R.id.connectButton;
      Button connectButton = ViewBindings.findChildViewById(rootView, id);
      if (connectButton == null) {
        break missingId;
      }

      id = R.id.connectionStatusText;
      TextView connectionStatusText = ViewBindings.findChildViewById(rootView, id);
      if (connectionStatusText == null) {
        break missingId;
      }

      id = R.id.controlButtonsContainer;
      LinearLayout controlButtonsContainer = ViewBindings.findChildViewById(rootView, id);
      if (controlButtonsContainer == null) {
        break missingId;
      }

      id = R.id.controlsView;
      ConstraintLayout controlsView = ViewBindings.findChildViewById(rootView, id);
      if (controlsView == null) {
        break missingId;
      }

      id = R.id.disconnectButton;
      Button disconnectButton = ViewBindings.findChildViewById(rootView, id);
      if (disconnectButton == null) {
        break missingId;
      }

      id = R.id.forwardButton;
      Button forwardButton = ViewBindings.findChildViewById(rootView, id);
      if (forwardButton == null) {
        break missingId;
      }

      id = R.id.leftButton;
      Button leftButton = ViewBindings.findChildViewById(rootView, id);
      if (leftButton == null) {
        break missingId;
      }

      id = R.id.noConnectionDescription;
      TextView noConnectionDescription = ViewBindings.findChildViewById(rootView, id);
      if (noConnectionDescription == null) {
        break missingId;
      }

      id = R.id.noConnectionIcon;
      ImageView noConnectionIcon = ViewBindings.findChildViewById(rootView, id);
      if (noConnectionIcon == null) {
        break missingId;
      }

      id = R.id.noConnectionTitle;
      TextView noConnectionTitle = ViewBindings.findChildViewById(rootView, id);
      if (noConnectionTitle == null) {
        break missingId;
      }

      id = R.id.noConnectionView;
      ConstraintLayout noConnectionView = ViewBindings.findChildViewById(rootView, id);
      if (noConnectionView == null) {
        break missingId;
      }

      id = R.id.rightButton;
      Button rightButton = ViewBindings.findChildViewById(rootView, id);
      if (rightButton == null) {
        break missingId;
      }

      id = R.id.rotateLeftButton;
      Button rotateLeftButton = ViewBindings.findChildViewById(rootView, id);
      if (rotateLeftButton == null) {
        break missingId;
      }

      id = R.id.rotateRightButton;
      Button rotateRightButton = ViewBindings.findChildViewById(rootView, id);
      if (rotateRightButton == null) {
        break missingId;
      }

      return new FragmentRobotControlBinding((ConstraintLayout) rootView, backwardButton,
          communicationLogContainer, communicationLogText, connectButton, connectionStatusText,
          controlButtonsContainer, controlsView, disconnectButton, forwardButton, leftButton,
          noConnectionDescription, noConnectionIcon, noConnectionTitle, noConnectionView,
          rightButton, rotateLeftButton, rotateRightButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
