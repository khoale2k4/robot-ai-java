// Generated by view binder compiler. Do not edit!
package com.example.my_first_app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.my_first_app.JoystickView;
import com.example.my_first_app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRobotControlBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button backwardButton;

  @NonNull
  public final LinearLayout buttonSection;

  @NonNull
  public final TextView communicationLogText;

  @NonNull
  public final TextView connectionStatusText;

  @NonNull
  public final LinearLayout controlSection;

  @NonNull
  public final Button disconnectButton;

  @NonNull
  public final Button forwardButton;

  @NonNull
  public final LinearLayout headerSection;

  @NonNull
  public final TextView joystickStatusText;

  @NonNull
  public final JoystickView joystickView;

  @NonNull
  public final Button leftButton;

  @NonNull
  public final Button rightButton;

  @NonNull
  public final Button stopButton;

  private ActivityRobotControlBinding(@NonNull RelativeLayout rootView,
      @NonNull Button backwardButton, @NonNull LinearLayout buttonSection,
      @NonNull TextView communicationLogText, @NonNull TextView connectionStatusText,
      @NonNull LinearLayout controlSection, @NonNull Button disconnectButton,
      @NonNull Button forwardButton, @NonNull LinearLayout headerSection,
      @NonNull TextView joystickStatusText, @NonNull JoystickView joystickView,
      @NonNull Button leftButton, @NonNull Button rightButton, @NonNull Button stopButton) {
    this.rootView = rootView;
    this.backwardButton = backwardButton;
    this.buttonSection = buttonSection;
    this.communicationLogText = communicationLogText;
    this.connectionStatusText = connectionStatusText;
    this.controlSection = controlSection;
    this.disconnectButton = disconnectButton;
    this.forwardButton = forwardButton;
    this.headerSection = headerSection;
    this.joystickStatusText = joystickStatusText;
    this.joystickView = joystickView;
    this.leftButton = leftButton;
    this.rightButton = rightButton;
    this.stopButton = stopButton;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRobotControlBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRobotControlBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_robot_control, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRobotControlBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backwardButton;
      Button backwardButton = ViewBindings.findChildViewById(rootView, id);
      if (backwardButton == null) {
        break missingId;
      }

      id = R.id.buttonSection;
      LinearLayout buttonSection = ViewBindings.findChildViewById(rootView, id);
      if (buttonSection == null) {
        break missingId;
      }

      id = R.id.communicationLogText;
      TextView communicationLogText = ViewBindings.findChildViewById(rootView, id);
      if (communicationLogText == null) {
        break missingId;
      }

      id = R.id.connectionStatusText;
      TextView connectionStatusText = ViewBindings.findChildViewById(rootView, id);
      if (connectionStatusText == null) {
        break missingId;
      }

      id = R.id.controlSection;
      LinearLayout controlSection = ViewBindings.findChildViewById(rootView, id);
      if (controlSection == null) {
        break missingId;
      }

      id = R.id.disconnectButton;
      Button disconnectButton = ViewBindings.findChildViewById(rootView, id);
      if (disconnectButton == null) {
        break missingId;
      }

      id = R.id.forwardButton;
      Button forwardButton = ViewBindings.findChildViewById(rootView, id);
      if (forwardButton == null) {
        break missingId;
      }

      id = R.id.headerSection;
      LinearLayout headerSection = ViewBindings.findChildViewById(rootView, id);
      if (headerSection == null) {
        break missingId;
      }

      id = R.id.joystickStatusText;
      TextView joystickStatusText = ViewBindings.findChildViewById(rootView, id);
      if (joystickStatusText == null) {
        break missingId;
      }

      id = R.id.joystickView;
      JoystickView joystickView = ViewBindings.findChildViewById(rootView, id);
      if (joystickView == null) {
        break missingId;
      }

      id = R.id.leftButton;
      Button leftButton = ViewBindings.findChildViewById(rootView, id);
      if (leftButton == null) {
        break missingId;
      }

      id = R.id.rightButton;
      Button rightButton = ViewBindings.findChildViewById(rootView, id);
      if (rightButton == null) {
        break missingId;
      }

      id = R.id.stopButton;
      Button stopButton = ViewBindings.findChildViewById(rootView, id);
      if (stopButton == null) {
        break missingId;
      }

      return new ActivityRobotControlBinding((RelativeLayout) rootView, backwardButton,
          buttonSection, communicationLogText, connectionStatusText, controlSection,
          disconnectButton, forwardButton, headerSection, joystickStatusText, joystickView,
          leftButton, rightButton, stopButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
